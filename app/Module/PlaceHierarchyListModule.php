<?php

/**
 * webtrees: online genealogy
 * Copyright (C) 2022 webtrees development team
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

declare(strict_types=1);

namespace Fisharebest\Webtrees\Module;

use Fisharebest\Webtrees\Auth;
use Fisharebest\Webtrees\Family;
use Fisharebest\Webtrees\Http\Exceptions\HttpNotFoundException;
use Fisharebest\Webtrees\Http\RequestHandlers\MapDataEdit;
use Fisharebest\Webtrees\I18N;
use Fisharebest\Webtrees\Individual;
use Fisharebest\Webtrees\Location;
use Fisharebest\Webtrees\Place;
use Fisharebest\Webtrees\PlaceLocation;
use Fisharebest\Webtrees\Registry;
use Fisharebest\Webtrees\Services\LeafletJsService;
use Fisharebest\Webtrees\Services\ModuleService;
use Fisharebest\Webtrees\Services\SearchService;
use Fisharebest\Webtrees\Tree;
use Fisharebest\Webtrees\Validator;
use Illuminate\Database\Capsule\Manager as DB;
use Illuminate\Database\Query\Builder;
use Illuminate\Database\Query\JoinClause;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Server\RequestHandlerInterface;

use function array_chunk;
use function array_pop;
use function array_reverse;
use function ceil;
use function count;
use function redirect;
use function route;
use function view;

/**
 * Class IndividualListModule
 */
class PlaceHierarchyListModule extends AbstractModule implements ModuleListInterface, RequestHandlerInterface
{
    use ModuleListTrait;

    protected const ROUTE_URL = '/tree/{tree}/place-list';

    /** @var int The default access level for this module.  It can be changed in the control panel. */
    protected int $access_level = Auth::PRIV_USER;

    private LeafletJsService $leaflet_js_service;

    private ModuleService $module_service;

    private SearchService $search_service;

    /**
     * PlaceHierarchy constructor.
     *
     * @param LeafletJsService $leaflet_js_service
     * @param ModuleService    $module_service
     * @param SearchService    $search_service
     */
    public function __construct(LeafletJsService $leaflet_js_service, ModuleService $module_service, SearchService $search_service)
    {
        $this->leaflet_js_service = $leaflet_js_service;
        $this->module_service     = $module_service;
        $this->search_service     = $search_service;
    }

    /**
     * Initialization.
     *
     * @return void
     */
    public function boot(): void
    {
        Registry::routeFactory()->routeMap()
            ->get(static::class, static::ROUTE_URL, $this);
    }

    /**
     * How should this module be identified in the control panel, etc.?
     *
     * @return string
     */
    public function title(): string
    {
        /* I18N: Name of a module/list */
        return I18N::translate('Place hierarchy');
    }

    /**
     * A sentence describing what this module does.
     *
     * @return string
     */
    public function description(): string
    {
        /* I18N: Description of the “Place hierarchy” module */
        return I18N::translate('The place hierarchy.');
    }

    /**
     * CSS class for the URL.
     *
     * @return string
     */
    public function listMenuClass(): string
    {
        return 'menu-list-plac';
    }

    /**
     * @return array<string>
     */
    public function listUrlAttributes(): array
    {
        return [];
    }

    /**
     * @param Tree $tree
     *
     * @return bool
     */
    public function listIsEmpty(Tree $tree): bool
    {
        return !DB::table('places')
            ->where('p_file', '=', $tree->id())
            ->exists();
    }

    /**
     * Handle URLs generated by older versions of webtrees
     *
     * @param ServerRequestInterface $request
     *
     * @return ResponseInterface
     */
    public function getListAction(ServerRequestInterface $request): ResponseInterface
    {
        $tree = Validator::attributes($request)->tree();

        return redirect($this->listUrl($tree, $request->getQueryParams()));
    }

    /**
     * @param Tree $tree
     * @param array<bool|int|string|array<string>|null> $parameters
     *
     * @return string
     */
    public function listUrl(Tree $tree, array $parameters = []): string
    {
        $parameters['tree'] = $tree->name();

        return route(static::class, $parameters);
    }

    /**
     * @param ServerRequestInterface $request
     *
     * @return ResponseInterface
     */
    public function handle(ServerRequestInterface $request): ResponseInterface
    {
        $tree = Validator::attributes($request)->tree();
        $user = Validator::attributes($request)->user();

        Auth::checkComponentAccess($this, ModuleListInterface::class, $tree, $user);

        $place_id = Validator::queryParams($request)->integer('place_id', 0);
        $place    = Place::find($place_id, $tree);

        // Request for a non-existent place?
        if ($place_id !== $place->id()) {
            throw new HttpNotFoundException(I18N::translate('The place with ID %s does not exist', (string) $place_id));
        }

        $map_providers = $this->module_service->findByInterface(ModuleMapProviderInterface::class);
        $use_map       = $map_providers->isNotEmpty();

        if ($use_map) {
            $content = view('modules/place-hierarchy/map', [
                'leaflet_config' => $this->leaflet_js_service->config(),
                'start_place_id' => $place_id,
            ]);
        } else {
            $content = view('modules/place-hierarchy/hierarchy', $this->getHierarchy($place));
        }

        return $this->viewResponse('modules/place-hierarchy/page', [
            'breadcrumbs'   => $this->breadcrumbs($place),
            'content'       => $content,
            'title'         => I18N::translate('Place hierarchy'),
            'tree'          => $tree,
            'use_map'       => $use_map,
            'place_summary' => $this->placeSummary($place),
        ]);
    }

    /**
     * @param Place $place
     *
     * @return array<mixed>
     */
    private function placeSummary($place): array
    {
        return [
            'id'   => $place->id(),
            'link' =>  I18N::translate('View table of events occurring in %s', $place->fullName()),
        ];
    }

    /**
     * @param Place $placeObj
     *
     * @return array<mixed>
     */
    protected function mapData(Place $placeObj): array
    {
        $places   = $placeObj->getChildPlaces();
        $features = [];
        $sidebar  = '';

        if ($places === []) {
            $places[] = $placeObj;
        }

        foreach ($places as $id => $place) {
            $location = new PlaceLocation($place->gedcomName());

            if ($location->latitude() === null || $location->longitude() === null) {
                $sidebar_class = 'unmapped';
            } else {
                $sidebar_class = 'mapped';
                $features[]    = [
                    'type'     => 'Feature',
                    'id'       => $id,
                    'geometry' => [
                        'type'        => 'Point',
                        'coordinates' => [$location->longitude(), $location->latitude()],
                    ],
                    'properties' => [
                        'tooltip' => $place->gedcomName(),
                        'popup'   => view('modules/place-hierarchy/popup', [
                            'place'     => $place,
                            'latitude'  => $location->latitude(),
                            'longitude' => $location->longitude(),
                        ]),
                    ],
                ];
            }

            $stats = [
                Family::RECORD_TYPE     => $this->familyPlaceLinks($place)->count(),
                Individual::RECORD_TYPE => $this->individualPlaceLinks($place)->count(),
                Location::RECORD_TYPE   => $this->locationPlaceLinks($place)->count(),
            ];

            $sidebar .= view('modules/place-hierarchy/sidebar', [
                'num_children'  => count($place->getChildPlaces()),
                'id'            => $id,
                'place'         => $place,
                'sidebar_class' => $sidebar_class,
                'stats'         => $stats,
                'geo_link'      => Auth::isAdmin() ? route(MapDataEdit::class, ['place_id'  => $location->id()]) : '',
            ]);
        }

        return [
            'sidebar' => $sidebar,
            'markers' => [
                'type'     => 'FeatureCollection',
                'features' => $features,
            ],
        ];
    }

    /**
     * @param Place $place
     *
     * @return array<mixed>
     */
    private function getHierarchy(Place $place): array
    {
        $places   = $place->getChildPlaces();
        $numfound = count($places);
        $divisor  = $numfound > 20 ? 3 : 2;

        if ($numfound > 0) {
            $columns = ceil($numfound / $divisor);
        } else {
            $columns = 1;
            $places  = [$place];
        }

        return [
            'col_class' => 'w-' . ($divisor > 2 ? '50' : '25'),
            'columns'   => array_chunk($places, (int) $columns),
        ];
    }

    /**
     * @param Place $place
     *
     * @return string
     */
    private function breadcrumbs(Place $place): string
    {
        $place_hierarchy = [];
        if ($place->gedcomName() !== '') {
            $place_hierarchy[] = $place;
            $parent_place      = $place->parent();
            while ($parent_place->gedcomName() !== '') {
                $place_hierarchy[] = $parent_place;
                $parent_place      = $parent_place->parent();
            }
            $place_hierarchy = array_reverse($place_hierarchy);
            $current         = array_pop($place_hierarchy);
        } else {
            $current = null;
        }

        return view('modules/place-hierarchy/breadcrumbs', [
            'place_hierarchy' => $place_hierarchy,
            'current'         => $current,
        ]);
    }

    /**
     * @param ServerRequestInterface $request
     *
     * @return ResponseInterface
     */
    public function postUpdateDataAction(ServerRequestInterface $request): ResponseInterface
    {
        $tree     = Validator::attributes($request)->tree();
        $place_id = Validator::parsedBody($request)->integer('placeId', 0);
        $type     = Validator::parsedBody($request)->string('type', '');
        $place    = Place::find($place_id, $tree);

        switch ($type) {
            case 'map':
                $data = $this->mapData($place);
                break;
            case 'events':
                $data = view('modules/place-hierarchy/events', [
                    'indilist' => $this->search_service->searchIndividualsInPlace($place),
                    'famlist'  => $this->search_service->searchFamiliesInPlace($place),
                    'tree'     => $tree,
                ]);
                break;
            default: // hierarchy
                $data = view('modules/place-hierarchy/hierarchy', $this->getHierarchy($place));
        }

        return response([
            'data'          => $data,
            'breadcrumbs'   => $this->breadcrumbs($place),
            'place_summary' => $this->placeSummary($place),
        ]);
    }

    /**
     * @param Place $place
     *
     * @return Builder
     */
    private function placeLinks(Place $place): Builder
    {
        return DB::table('places')
            ->join('placelinks', static function (JoinClause $join): void {
                $join
                    ->on('pl_file', '=', 'p_file')
                    ->on('pl_p_id', '=', 'p_id');
            })
            ->where('p_file', '=', $place->tree()->id())
            ->where('p_id', '=', $place->id());
    }

    /**
     * @param Place $place
     *
     * @return Builder
     */
    private function familyPlaceLinks(Place $place): Builder
    {
        return $this->placeLinks($place)
            ->join('families', static function (JoinClause $join): void {
                $join
                    ->on('pl_file', '=', 'f_file')
                    ->on('pl_gid', '=', 'f_id');
            });
    }

    /**
     * @param Place $place
     *
     * @return Builder
     */
    private function individualPlaceLinks(Place $place): Builder
    {
        return $this->placeLinks($place)
            ->join('individuals', static function (JoinClause $join): void {
                $join
                    ->on('pl_file', '=', 'i_file')
                    ->on('pl_gid', '=', 'i_id');
            });
    }

    /**
     * @param Place $place
     *
     * @return Builder
     */
    private function locationPlaceLinks(Place $place): Builder
    {
        return $this->placeLinks($place)
            ->join('other', static function (JoinClause $join): void {
                $join
                    ->on('pl_file', '=', 'o_file')
                    ->on('pl_gid', '=', 'o_id');
            })
            ->where('o_type', '=', Location::RECORD_TYPE);
    }
}
