<?php

use Fisharebest\Webtrees\I18N;
use Fisharebest\Webtrees\View;

/**
 * @var object  $leaflet_config
 */

?>

<div id="wt-map" class="col-sm-9 wt-ajax-load wt-map wt-place-hierarchy-map" dir="ltr"></div>
<ul class="col-sm-3 wt-place-hierarchy-sidebar wt-page-options-value list-unstyled px-1"></ul>

<?php View::push('javascript') ?>
<script>
  'use strict';

  (function () {
    const config = <?= json_encode($leaflet_config, JSON_THROW_ON_ERROR) ?>;

    let map = null;
    const sidebar = document.querySelector('.wt-place-hierarchy-sidebar');

    const scrollOptions = {
      behavior: "smooth",
      block: "start",
      inline: "start"
    };

    // Map components
    let markers = null;

    /**
     * Passed to resetControl to
     * perform necessary reset actions on map
     */
    const resetCallback = () => {
      map.flyToBounds(markers.getBounds(), {
        padding: [50, 30],
        maxZoom: 15
      });
      sidebar.firstElementChild.scrollIntoView(scrollOptions);
    }

    /**
     * @private
     */
    const _drawMap = () => {
      map = webtrees.buildLeafletJsMap('wt-map', config, resetCallback);
      map.fitWorld({
        padding: [50, 30]
      });
    };

    /**
     * @private
     *
     * @param {object} data
     */
    const _buildMapData = (data) => {
      markers = L.markerClusterGroup({
        showCoverageOnHover: false,
      });

      let geoJsonLayer = L.geoJson(data.markers, {
        pointToLayer: function (feature, latlng) {
          return new L.Marker(latlng, {
            icon: L.BeautifyIcon.icon({
              icon: 'bullseye fas',
              borderColor: 'transparent',
              backgroundColor: '#1e90ff',
              iconShape: 'marker',
              textColor: 'white',
            }),
            title: feature.properties.tooltip,
            id: feature.id,
          })
          .on('popupopen', function (e) {
            let item = document.querySelector('.mapped[data-wt-feature-id="' + e.target.feature.id + '"]');
            item.classList.add('messagebox');
            item.scrollIntoView(scrollOptions);
          })
          .on('popupclose', function () {
            sidebar.querySelectorAll('.mapped').forEach(e => e.classList.remove('messagebox'));
            sidebar.firstElementChild.scrollIntoView(scrollOptions);
          });
        },
        onEachFeature: function (feature, layer) {
          layer.bindPopup(feature.properties.popup, {
            minWidth: 150
          });
        },
      });

      if (data.markers.features.length > 0) {
        markers.addLayer(geoJsonLayer);
        map.addLayer(markers);
      }

      map.flyToBounds(markers.getBounds(), {
        padding: [50, 30],
        maxZoom: 15
      });
      sidebar.innerHTML = data.sidebar;
    };

    /**
     * @private
     *
     * @param {integer} id
     */
    const _getMapData = (id) => {
      const markersLoaded = map.hasLayer(markers);
      if (markersLoaded) {
        wt_place_list.updateLinks({
          breadcrumbs: <?= json_encode(I18N::translate('Updating map&hellip;')) ?>,
          place_summary: {
            id: 0,
          }
        });
      }
      wt_place_list.getData('map', id, false, function (text) {
        map.once('zoomend', () => {
          // Update the breadcrumbs and the link below the map
          wt_place_list.updateLinks(result);
        });
        const result = JSON.parse(text);
        // Update the map
        if (markersLoaded) {
          map.removeLayer(markers);
          markers.clearLayers();
        }
        _buildMapData(result.data);
      });
    };

    window.onload = () => {
      document.getElementById('place-hierarchy').addEventListener('click', (evt) => {
        if (evt.target.closest('a') && evt.target.closest('a').hasAttribute('href')) {
          //do nothing - go to the href value
        } else if (evt.target.parentNode.classList.contains('map-place')) {
          _getMapData(evt.target.parentNode.dataset.id);
        } else if (evt.target.closest('li.mapped')) {
          // find the marker corresponding to the clicked event
          const eventId = parseInt(evt.target.closest('.gchart').dataset.wtFeatureId);
          let mkrLayer = markers.getLayers().filter(function (v) {
            return v.feature !== undefined && v.feature.id === eventId;
          });
          const mkr = mkrLayer.pop();

          if (mkr instanceof L.Layer) {
            markers.zoomToShowLayer(mkr, function (e) {
              mkr.openPopup();
            });
          } else {
            // Should never get here
            console.log('Error: unable to find the selected marker');
          }

          return false;
        }
      });
      _drawMap();
      _getMapData(null);
    };
  })();
</script>
<?php View::endpush() ?>
