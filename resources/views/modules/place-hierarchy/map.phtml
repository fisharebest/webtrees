<?php

use Fisharebest\Webtrees\View;

/**
 * @var array<mixed> $data
 * @var object       $leaflet_config
 */

?>

<div class="row gchart wt-place-hierarchy-wrapper">
    <div id="wt-map" class="col-sm-9 wt-ajax-load wt-map wt-place-hierarchy-map" dir="ltr"></div>
    <ul class="col-sm-3 wt-place-hierarchy-sidebar wt-page-options-value list-unstyled px-1"></ul>
</div>

<?php View::push('javascript') ?>
<script>
  'use strict';

  (function () {
    const config = <?= json_encode($leaflet_config, JSON_THROW_ON_ERROR) ?>;

    let map = null;
    const sidebar = document.querySelector('.wt-place-hierarchy-sidebar');

    const scrollOptions = {
      behavior: "smooth",
      block: "start",
      inline: "start"
    };

    // Map components
    let markers = L.markerClusterGroup({
      showCoverageOnHover: false,
    });

    /**
     * Passed to resetControl to
     * perform necessary reset actions on map
     */
     let resetCallback = function () {
       window.location.href = <?= json_encode($world_url, JSON_THROW_ON_ERROR) ?>;
    }

    /**
     * @private
     */
    let _drawMap = function () {
      map = webtrees.buildLeafletJsMap('wt-map', config, resetCallback);
    };

    /**
     * @private
     */
    let _buildMapData = function () {
      let data = <?= json_encode($data['markers'], JSON_THROW_ON_ERROR) ?>;

      let geoJsonLayer = L.geoJson(data, {
        pointToLayer: function (feature, latlng) {
          return new L.Marker(latlng, {
            icon: L.BeautifyIcon.icon({
              icon: 'bullseye fas',
              borderColor: 'transparent',
              backgroundColor: '#1e90ff',
              iconShape: 'marker',
              textColor: 'white',
            }),
            title: feature.properties.tooltip,
            alt: feature.properties.tooltip,
            id: feature.id,
          })
            .on('popupopen', function (e) {
              let item = document.querySelector('.mapped[data-wt-feature-id="' + e.target.feature.id + '"]');
              item.classList.add('messagebox');
              item.scrollIntoView(scrollOptions);
            })
            .on('popupclose', function () {
              sidebar.querySelectorAll('.mapped').forEach(e => e.classList.remove('messagebox'));
              sidebar.firstElementChild.scrollIntoView(scrollOptions);
            });
        },
        onEachFeature: function (feature, layer) {
          layer.bindPopup(feature.properties.popup, {minWidth: 150});
        },
      });

      if (data.features.length > 0) {
        markers.addLayer(geoJsonLayer);
        map.addLayer(markers);
      }

      map.fitBounds(<?= json_encode($data['bounds'], JSON_THROW_ON_ERROR) ?>, { padding: [50, 30] });
      sidebar.innerHTML = <?= json_encode($data['sidebar'], JSON_THROW_ON_ERROR) ?>;
   };

    window.onload = function() {
    // Activate marker popup when sidebar entry clicked
      sidebar.addEventListener('click', (evt) => {
        // Has this location got map co-ordinates?
        if (!evt.target.closest('a') && evt.target.closest('li.mapped')) {
          //find the marker corresponding to the clicked event
          const eventId = parseInt(evt.target.closest('.gchart').dataset.wtFeatureId);
          let mkrLayer = markers.getLayers().filter(function (v) {
            return v.feature !== undefined && v.feature.id === eventId;
          });
          const mkr = mkrLayer.pop();

          if (mkr instanceof L.Layer) {
            markers.zoomToShowLayer(mkr, function (e) {
              mkr.openPopup();
            });
          } else {
            // Should never get here
            console.log('Error: unable to find the selected marker');
          }

          return false;
        }
    });
  }

  _drawMap();
  _buildMapData();
  })();
</script>
<?php View::endpush() ?>
